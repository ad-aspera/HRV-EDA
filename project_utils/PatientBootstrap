import numpy as np
import pandas as pd
import os
import pickle as pkl


class PatientBootstrap():
    """Bootstraps a distribution of a metric for a group of ids.
    Bootstraps mean by repeatedly sampling 1 datum from each patient id;
    then a mean for DPN and control groups is calculated.
    Args:
        data (pd.DataFrame): The data to sample from
        n (int): Number of means to sample
        save_folder (str): Folder to save the memory of the bootstrapper
    """

    def __init__(self, data, n=5000, save_folder = "processed_data"):
        self.data = data
        self.n = n
        self.memory = {}

        self.save_folder = save_folder
        if not os.path.exists(self.save_folder):
            os.makedirs(self.save_folder)

    def sample_metric(self, metric:str, id:str):
        """Sample a single value of a metric for a given id"""
        return self.data.loc[self.data['id'] == id, metric].sample(1).values[0]

    def sample_group_metric(self, metric:str, ids:list[str]):
        """Sample a single value of a metric for each id"""
        return [self.sample_metric(metric, ID) for ID in ids]

    def get_distribution(self, metric:str, ids:str, agg_func=np.mean):
        """Get a distribution of a metric for a group of ids"""
        values = [self.sample_group_metric(metric, ids) for _ in range(self.n)]
        distribution = [agg_func(group) for group in values]
        return distribution
    
    def sample_dpn_control(self, metric:str, agg_func=np.mean):
        """RENAME, get the distribution of a metric for both DPN and control group"""
        self.memory[metric] ={'DPN': self.get_distribution(metric, DPN_ID),
                                'Control':self.get_distribution(metric, control_ID, agg_func=np.mean)}
        return self.memory[metric]
    def access_memory_metric(self, metric:str):
        return self.memory[metric]
    
    def pickle_memory(self, file_name:str="sampler_memory.pkl"):
        path = os.path.join(self.save_folder,file_name)
        with open(path, 'wb') as f:
            pkl.dump(self.memory, f)

    def load_memory(self, file_name:str="sampler_memory.pkl"):
        path = os.path.join(self.save_folder,file_name)
        with open(path, 'rb') as f:
            self.memory = pkl.load(f)